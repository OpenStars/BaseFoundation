/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TP2PService_H
#define TP2PService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "distributed_types.h"
#include "TBackendManagerService.h"

namespace openstars { namespace distributed {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TP2PServiceIf : virtual public TBackendManagerServiceIf {
 public:
  virtual ~TP2PServiceIf() {}
};

class TP2PServiceIfFactory : virtual public TBackendManagerServiceIfFactory {
 public:
  typedef TP2PServiceIf Handler;

  virtual ~TP2PServiceIfFactory() {}

  virtual TP2PServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) override = 0;
  virtual void releaseHandler(TBackendManagerServiceIf* /* handler */) override = 0;
  };

class TP2PServiceIfSingletonFactory : virtual public TP2PServiceIfFactory {
 public:
  TP2PServiceIfSingletonFactory(const ::std::shared_ptr<TP2PServiceIf>& iface) : iface_(iface) {}
  virtual ~TP2PServiceIfSingletonFactory() {}

  virtual TP2PServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(TBackendManagerServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<TP2PServiceIf> iface_;
};

class TP2PServiceNull : virtual public TP2PServiceIf , virtual public TBackendManagerServiceNull {
 public:
  virtual ~TP2PServiceNull() {}
};

class TP2PServiceClient : virtual public TP2PServiceIf, public TBackendManagerServiceClient {
 public:
  TP2PServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    TBackendManagerServiceClient(prot, prot) {}
  TP2PServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :    TBackendManagerServiceClient(iprot, oprot) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
};

class TP2PServiceProcessor : public TBackendManagerServiceProcessor {
 protected:
  ::std::shared_ptr<TP2PServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (TP2PServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
 public:
  TP2PServiceProcessor(::std::shared_ptr<TP2PServiceIf> iface) :
    TBackendManagerServiceProcessor(iface),
    iface_(iface) {
  }

  virtual ~TP2PServiceProcessor() {}
};

class TP2PServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TP2PServiceProcessorFactory(const ::std::shared_ptr< TP2PServiceIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< TP2PServiceIfFactory > handlerFactory_;
};

class TP2PServiceMultiface : virtual public TP2PServiceIf, public TBackendManagerServiceMultiface {
 public:
  TP2PServiceMultiface(std::vector<std::shared_ptr<TP2PServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<std::shared_ptr<TP2PServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
      TBackendManagerServiceMultiface::add(*iter);
    }
  }
  virtual ~TP2PServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<TP2PServiceIf> > ifaces_;
  TP2PServiceMultiface() {}
  void add(::std::shared_ptr<TP2PServiceIf> iface) {
    TBackendManagerServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TP2PServiceConcurrentClient : virtual public TP2PServiceIf, public TBackendManagerServiceConcurrentClient {
 public:
  TP2PServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :
    TBackendManagerServiceConcurrentClient(prot, prot, sync) {}
  TP2PServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :    TBackendManagerServiceConcurrentClient(iprot, oprot, sync) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
