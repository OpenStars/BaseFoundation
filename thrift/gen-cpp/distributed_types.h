/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef distributed_TYPES_H
#define distributed_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace openstars { namespace distributed {

struct TProtocolType {
  enum type {
    EUnknown = 0,
    EBinaryProtocol = 1,
    ECompactProtocol = 2,
    EMemcacheProtocol = 3,
    EHTTPProtocol = 4,
    EWebsocketProtocol = 5,
    ERawTCPProtocol = 6,
    EGrpc = 10,
    EGrpcWeb = 11
  };
};

extern const std::map<int, const char*> _TProtocolType_VALUES_TO_NAMES;

struct TBackendStatus {
  enum type {
    EReady = 1,
    EInActiveForAdding = 2,
    EInActiveForRemoving = 3,
    EReadyRemove = 4
  };
};

extern const std::map<int, const char*> _TBackendStatus_VALUES_TO_NAMES;

typedef int64_t THashType;

typedef int64_t TSyncTransactionIDType;

class TDeadBackend;

class TDataMovingStatus;

class TBackendInfo;

typedef struct _TDeadBackend__isset {
  _TDeadBackend__isset() : error(false), host(false), port(false), message(false) {}
  bool error :1;
  bool host :1;
  bool port :1;
  bool message :1;
} _TDeadBackend__isset;

class TDeadBackend : public ::apache::thrift::TException {
 public:

  TDeadBackend(const TDeadBackend&);
  TDeadBackend& operator=(const TDeadBackend&);
  TDeadBackend() : error(0), host(), port(0), message() {
  }

  virtual ~TDeadBackend() throw();
  int32_t error;
  std::string host;
  int32_t port;
  std::string message;

  _TDeadBackend__isset __isset;

  void __set_error(const int32_t val);

  void __set_host(const std::string& val);

  void __set_port(const int32_t val);

  void __set_message(const std::string& val);

  bool operator == (const TDeadBackend & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const TDeadBackend &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDeadBackend & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(TDeadBackend &a, TDeadBackend &b);

inline std::ostream& operator<<(std::ostream& out, const TDeadBackend& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TDataMovingStatus__isset {
  _TDataMovingStatus__isset() : fromHash(false), toHash(false), totalItem(false), numChecked(false), numMoved(false), running(false) {}
  bool fromHash :1;
  bool toHash :1;
  bool totalItem :1;
  bool numChecked :1;
  bool numMoved :1;
  bool running :1;
} _TDataMovingStatus__isset;

class TDataMovingStatus : public virtual ::apache::thrift::TBase {
 public:

  TDataMovingStatus(const TDataMovingStatus&);
  TDataMovingStatus& operator=(const TDataMovingStatus&);
  TDataMovingStatus() : fromHash(0), toHash(0), totalItem(0), numChecked(0), numMoved(0), running(0) {
  }

  virtual ~TDataMovingStatus() throw();
  THashType fromHash;
  THashType toHash;
  int64_t totalItem;
  int64_t numChecked;
  int64_t numMoved;
  bool running;

  _TDataMovingStatus__isset __isset;

  void __set_fromHash(const THashType val);

  void __set_toHash(const THashType val);

  void __set_totalItem(const int64_t val);

  void __set_numChecked(const int64_t val);

  void __set_numMoved(const int64_t val);

  void __set_running(const bool val);

  bool operator == (const TDataMovingStatus & rhs) const
  {
    if (!(fromHash == rhs.fromHash))
      return false;
    if (!(toHash == rhs.toHash))
      return false;
    if (!(totalItem == rhs.totalItem))
      return false;
    if (!(numChecked == rhs.numChecked))
      return false;
    if (!(numMoved == rhs.numMoved))
      return false;
    if (!(running == rhs.running))
      return false;
    return true;
  }
  bool operator != (const TDataMovingStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDataMovingStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDataMovingStatus &a, TDataMovingStatus &b);

inline std::ostream& operator<<(std::ostream& out, const TDataMovingStatus& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TBackendInfo__isset {
  _TBackendInfo__isset() : host(false), port(false), startRange(false), weight(false), status(false), servicePath(false) {}
  bool host :1;
  bool port :1;
  bool startRange :1;
  bool weight :1;
  bool status :1;
  bool servicePath :1;
} _TBackendInfo__isset;

class TBackendInfo : public virtual ::apache::thrift::TBase {
 public:

  TBackendInfo(const TBackendInfo&);
  TBackendInfo& operator=(const TBackendInfo&);
  TBackendInfo() : host(), port(0), startRange(0), weight(0), status((TBackendStatus::type)0), servicePath() {
  }

  virtual ~TBackendInfo() throw();
  std::string host;
  int32_t port;
  THashType startRange;
  int32_t weight;
  TBackendStatus::type status;
  std::string servicePath;

  _TBackendInfo__isset __isset;

  void __set_host(const std::string& val);

  void __set_port(const int32_t val);

  void __set_startRange(const THashType val);

  void __set_weight(const int32_t val);

  void __set_status(const TBackendStatus::type val);

  void __set_servicePath(const std::string& val);

  bool operator == (const TBackendInfo & rhs) const
  {
    if (!(host == rhs.host))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(startRange == rhs.startRange))
      return false;
    if (!(weight == rhs.weight))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(servicePath == rhs.servicePath))
      return false;
    return true;
  }
  bool operator != (const TBackendInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TBackendInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TBackendInfo &a, TBackendInfo &b);

inline std::ostream& operator<<(std::ostream& out, const TBackendInfo& obj)
{
  obj.printTo(out);
  return out;
}

}} // namespace

#endif
