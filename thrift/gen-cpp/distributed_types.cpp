/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "distributed_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace openstars { namespace distributed {

int _kTProtocolTypeValues[] = {
  TProtocolType::EUnknown,
  TProtocolType::EBinaryProtocol,
  TProtocolType::ECompactProtocol,
  TProtocolType::EMemcacheProtocol,
  TProtocolType::EHTTPProtocol,
  TProtocolType::EWebsocketProtocol,
  TProtocolType::ERawTCPProtocol,
  TProtocolType::EGrpc,
  TProtocolType::EGrpcWeb
};
const char* _kTProtocolTypeNames[] = {
  "EUnknown",
  "EBinaryProtocol",
  "ECompactProtocol",
  "EMemcacheProtocol",
  "EHTTPProtocol",
  "EWebsocketProtocol",
  "ERawTCPProtocol",
  "EGrpc",
  "EGrpcWeb"
};
const std::map<int, const char*> _TProtocolType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _kTProtocolTypeValues, _kTProtocolTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TProtocolType::type& val) {
  std::map<int, const char*>::const_iterator it = _TProtocolType_VALUES_TO_NAMES.find(val);
  if (it != _TProtocolType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTBackendStatusValues[] = {
  TBackendStatus::EReady,
  TBackendStatus::EInActiveForAdding,
  TBackendStatus::EInActiveForRemoving,
  TBackendStatus::EReadyRemove
};
const char* _kTBackendStatusNames[] = {
  "EReady",
  "EInActiveForAdding",
  "EInActiveForRemoving",
  "EReadyRemove"
};
const std::map<int, const char*> _TBackendStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTBackendStatusValues, _kTBackendStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TBackendStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _TBackendStatus_VALUES_TO_NAMES.find(val);
  if (it != _TBackendStatus_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


TDeadBackend::~TDeadBackend() throw() {
}


void TDeadBackend::__set_error(const int32_t val) {
  this->error = val;
}

void TDeadBackend::__set_host(const std::string& val) {
  this->host = val;
}

void TDeadBackend::__set_port(const int32_t val) {
  this->port = val;
}

void TDeadBackend::__set_message(const std::string& val) {
  this->message = val;
}
std::ostream& operator<<(std::ostream& out, const TDeadBackend& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDeadBackend::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->error);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->host);
          this->__isset.host = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDeadBackend::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDeadBackend");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("host", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->host);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDeadBackend &a, TDeadBackend &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.host, b.host);
  swap(a.port, b.port);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

TDeadBackend::TDeadBackend(const TDeadBackend& other0) : TException() {
  error = other0.error;
  host = other0.host;
  port = other0.port;
  message = other0.message;
  __isset = other0.__isset;
}
TDeadBackend& TDeadBackend::operator=(const TDeadBackend& other1) {
  error = other1.error;
  host = other1.host;
  port = other1.port;
  message = other1.message;
  __isset = other1.__isset;
  return *this;
}
void TDeadBackend::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDeadBackend(";
  out << "error=" << to_string(error);
  out << ", " << "host=" << to_string(host);
  out << ", " << "port=" << to_string(port);
  out << ", " << "message=" << to_string(message);
  out << ")";
}

const char* TDeadBackend::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: TDeadBackend";
  }
}


TDataMovingStatus::~TDataMovingStatus() throw() {
}


void TDataMovingStatus::__set_fromHash(const THashType val) {
  this->fromHash = val;
}

void TDataMovingStatus::__set_toHash(const THashType val) {
  this->toHash = val;
}

void TDataMovingStatus::__set_totalItem(const int64_t val) {
  this->totalItem = val;
}

void TDataMovingStatus::__set_numChecked(const int64_t val) {
  this->numChecked = val;
}

void TDataMovingStatus::__set_numMoved(const int64_t val) {
  this->numMoved = val;
}

void TDataMovingStatus::__set_running(const bool val) {
  this->running = val;
}
std::ostream& operator<<(std::ostream& out, const TDataMovingStatus& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDataMovingStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fromHash);
          this->__isset.fromHash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->toHash);
          this->__isset.toHash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->totalItem);
          this->__isset.totalItem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numChecked);
          this->__isset.numChecked = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numMoved);
          this->__isset.numMoved = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->running);
          this->__isset.running = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDataMovingStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDataMovingStatus");

  xfer += oprot->writeFieldBegin("fromHash", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->fromHash);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("toHash", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->toHash);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalItem", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->totalItem);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numChecked", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->numChecked);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numMoved", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->numMoved);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("running", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->running);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDataMovingStatus &a, TDataMovingStatus &b) {
  using ::std::swap;
  swap(a.fromHash, b.fromHash);
  swap(a.toHash, b.toHash);
  swap(a.totalItem, b.totalItem);
  swap(a.numChecked, b.numChecked);
  swap(a.numMoved, b.numMoved);
  swap(a.running, b.running);
  swap(a.__isset, b.__isset);
}

TDataMovingStatus::TDataMovingStatus(const TDataMovingStatus& other2) {
  fromHash = other2.fromHash;
  toHash = other2.toHash;
  totalItem = other2.totalItem;
  numChecked = other2.numChecked;
  numMoved = other2.numMoved;
  running = other2.running;
  __isset = other2.__isset;
}
TDataMovingStatus& TDataMovingStatus::operator=(const TDataMovingStatus& other3) {
  fromHash = other3.fromHash;
  toHash = other3.toHash;
  totalItem = other3.totalItem;
  numChecked = other3.numChecked;
  numMoved = other3.numMoved;
  running = other3.running;
  __isset = other3.__isset;
  return *this;
}
void TDataMovingStatus::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDataMovingStatus(";
  out << "fromHash=" << to_string(fromHash);
  out << ", " << "toHash=" << to_string(toHash);
  out << ", " << "totalItem=" << to_string(totalItem);
  out << ", " << "numChecked=" << to_string(numChecked);
  out << ", " << "numMoved=" << to_string(numMoved);
  out << ", " << "running=" << to_string(running);
  out << ")";
}


TBackendInfo::~TBackendInfo() throw() {
}


void TBackendInfo::__set_host(const std::string& val) {
  this->host = val;
}

void TBackendInfo::__set_port(const int32_t val) {
  this->port = val;
}

void TBackendInfo::__set_startRange(const THashType val) {
  this->startRange = val;
}

void TBackendInfo::__set_weight(const int32_t val) {
  this->weight = val;
}

void TBackendInfo::__set_status(const TBackendStatus::type val) {
  this->status = val;
}

void TBackendInfo::__set_servicePath(const std::string& val) {
  this->servicePath = val;
}
std::ostream& operator<<(std::ostream& out, const TBackendInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TBackendInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->host);
          this->__isset.host = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startRange);
          this->__isset.startRange = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->weight);
          this->__isset.weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast4;
          xfer += iprot->readI32(ecast4);
          this->status = (TBackendStatus::type)ecast4;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->servicePath);
          this->__isset.servicePath = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TBackendInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TBackendInfo");

  xfer += oprot->writeFieldBegin("host", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->host);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startRange", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->startRange);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("weight", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->weight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("servicePath", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->servicePath);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TBackendInfo &a, TBackendInfo &b) {
  using ::std::swap;
  swap(a.host, b.host);
  swap(a.port, b.port);
  swap(a.startRange, b.startRange);
  swap(a.weight, b.weight);
  swap(a.status, b.status);
  swap(a.servicePath, b.servicePath);
  swap(a.__isset, b.__isset);
}

TBackendInfo::TBackendInfo(const TBackendInfo& other5) {
  host = other5.host;
  port = other5.port;
  startRange = other5.startRange;
  weight = other5.weight;
  status = other5.status;
  servicePath = other5.servicePath;
  __isset = other5.__isset;
}
TBackendInfo& TBackendInfo::operator=(const TBackendInfo& other6) {
  host = other6.host;
  port = other6.port;
  startRange = other6.startRange;
  weight = other6.weight;
  status = other6.status;
  servicePath = other6.servicePath;
  __isset = other6.__isset;
  return *this;
}
void TBackendInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TBackendInfo(";
  out << "host=" << to_string(host);
  out << ", " << "port=" << to_string(port);
  out << ", " << "startRange=" << to_string(startRange);
  out << ", " << "weight=" << to_string(weight);
  out << ", " << "status=" << to_string(status);
  out << ", " << "servicePath=" << to_string(servicePath);
  out << ")";
}

}} // namespace
