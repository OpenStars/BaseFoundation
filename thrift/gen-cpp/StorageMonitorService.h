/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef StorageMonitorService_H
#define StorageMonitorService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "backendmonitor_types.h"
#include "MonitorReadService.h"

namespace openstars { namespace base { namespace storage { namespace monitor {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class StorageMonitorServiceIf : virtual public  ::openstars::base::monitor::MonitorReadServiceIf {
 public:
  virtual ~StorageMonitorServiceIf() {}
  virtual void getCurrentCacheStorageStat(backendStat& _return) = 0;
  virtual void getCacheStorageStat(backendStat& _return, const int32_t seconds) = 0;
  virtual void enableStorageBackend(const bool isRead, const bool isEnable, const std::string& beName) = 0;
  virtual void setCacheMaxSize(const int32_t newMaxSize) = 0;
  virtual void saveDataToBackend(const bool enable) = 0;
  virtual void enableWarming(const bool enable) = 0;
  virtual void compactData(const std::string& storageName) = 0;
  virtual void closeStorage(const std::string& stgName) = 0;
  virtual void openStorage(const std::string& stgCreateOption) = 0;
  virtual void getZKServicePath(std::string& _return) = 0;
  virtual void getZKConfigPath(std::string& _return) = 0;
  virtual void checkZKService() = 0;
  virtual void checkZKConfigPath() = 0;
  virtual void registerServiceZK(const std::string& basePath, const std::string& scheme) = 0;
  virtual void registerConfigZK(const std::string& basePath, const std::string& scheme) = 0;
  virtual void addListenServicePort(const int32_t newPort) = 0;
};

class StorageMonitorServiceIfFactory : virtual public  ::openstars::base::monitor::MonitorReadServiceIfFactory {
 public:
  typedef StorageMonitorServiceIf Handler;

  virtual ~StorageMonitorServiceIfFactory() {}

  virtual StorageMonitorServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) override = 0;
  virtual void releaseHandler( ::openstars::base::OpenBaseServiceIf* /* handler */) override = 0;
  };

class StorageMonitorServiceIfSingletonFactory : virtual public StorageMonitorServiceIfFactory {
 public:
  StorageMonitorServiceIfSingletonFactory(const ::std::shared_ptr<StorageMonitorServiceIf>& iface) : iface_(iface) {}
  virtual ~StorageMonitorServiceIfSingletonFactory() {}

  virtual StorageMonitorServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler( ::openstars::base::OpenBaseServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<StorageMonitorServiceIf> iface_;
};

class StorageMonitorServiceNull : virtual public StorageMonitorServiceIf , virtual public  ::openstars::base::monitor::MonitorReadServiceNull {
 public:
  virtual ~StorageMonitorServiceNull() {}
  void getCurrentCacheStorageStat(backendStat& /* _return */) override {
    return;
  }
  void getCacheStorageStat(backendStat& /* _return */, const int32_t /* seconds */) override {
    return;
  }
  void enableStorageBackend(const bool /* isRead */, const bool /* isEnable */, const std::string& /* beName */) override {
    return;
  }
  void setCacheMaxSize(const int32_t /* newMaxSize */) override {
    return;
  }
  void saveDataToBackend(const bool /* enable */) override {
    return;
  }
  void enableWarming(const bool /* enable */) override {
    return;
  }
  void compactData(const std::string& /* storageName */) override {
    return;
  }
  void closeStorage(const std::string& /* stgName */) override {
    return;
  }
  void openStorage(const std::string& /* stgCreateOption */) override {
    return;
  }
  void getZKServicePath(std::string& /* _return */) override {
    return;
  }
  void getZKConfigPath(std::string& /* _return */) override {
    return;
  }
  void checkZKService() override {
    return;
  }
  void checkZKConfigPath() override {
    return;
  }
  void registerServiceZK(const std::string& /* basePath */, const std::string& /* scheme */) override {
    return;
  }
  void registerConfigZK(const std::string& /* basePath */, const std::string& /* scheme */) override {
    return;
  }
  void addListenServicePort(const int32_t /* newPort */) override {
    return;
  }
};


class StorageMonitorService_getCurrentCacheStorageStat_args {
 public:

  StorageMonitorService_getCurrentCacheStorageStat_args(const StorageMonitorService_getCurrentCacheStorageStat_args&) noexcept;
  StorageMonitorService_getCurrentCacheStorageStat_args& operator=(const StorageMonitorService_getCurrentCacheStorageStat_args&) noexcept;
  StorageMonitorService_getCurrentCacheStorageStat_args() noexcept {
  }

  virtual ~StorageMonitorService_getCurrentCacheStorageStat_args() noexcept;

  bool operator == (const StorageMonitorService_getCurrentCacheStorageStat_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StorageMonitorService_getCurrentCacheStorageStat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_getCurrentCacheStorageStat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_getCurrentCacheStorageStat_pargs {
 public:


  virtual ~StorageMonitorService_getCurrentCacheStorageStat_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageMonitorService_getCurrentCacheStorageStat_result__isset {
  _StorageMonitorService_getCurrentCacheStorageStat_result__isset() : success(false) {}
  bool success :1;
} _StorageMonitorService_getCurrentCacheStorageStat_result__isset;

class StorageMonitorService_getCurrentCacheStorageStat_result {
 public:

  StorageMonitorService_getCurrentCacheStorageStat_result(const StorageMonitorService_getCurrentCacheStorageStat_result&);
  StorageMonitorService_getCurrentCacheStorageStat_result& operator=(const StorageMonitorService_getCurrentCacheStorageStat_result&);
  StorageMonitorService_getCurrentCacheStorageStat_result() noexcept {
  }

  virtual ~StorageMonitorService_getCurrentCacheStorageStat_result() noexcept;
  backendStat success;

  _StorageMonitorService_getCurrentCacheStorageStat_result__isset __isset;

  void __set_success(const backendStat& val);

  bool operator == (const StorageMonitorService_getCurrentCacheStorageStat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StorageMonitorService_getCurrentCacheStorageStat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_getCurrentCacheStorageStat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageMonitorService_getCurrentCacheStorageStat_presult__isset {
  _StorageMonitorService_getCurrentCacheStorageStat_presult__isset() : success(false) {}
  bool success :1;
} _StorageMonitorService_getCurrentCacheStorageStat_presult__isset;

class StorageMonitorService_getCurrentCacheStorageStat_presult {
 public:


  virtual ~StorageMonitorService_getCurrentCacheStorageStat_presult() noexcept;
  backendStat* success;

  _StorageMonitorService_getCurrentCacheStorageStat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StorageMonitorService_getCacheStorageStat_args__isset {
  _StorageMonitorService_getCacheStorageStat_args__isset() : seconds(false) {}
  bool seconds :1;
} _StorageMonitorService_getCacheStorageStat_args__isset;

class StorageMonitorService_getCacheStorageStat_args {
 public:

  StorageMonitorService_getCacheStorageStat_args(const StorageMonitorService_getCacheStorageStat_args&) noexcept;
  StorageMonitorService_getCacheStorageStat_args& operator=(const StorageMonitorService_getCacheStorageStat_args&) noexcept;
  StorageMonitorService_getCacheStorageStat_args() noexcept
                                                 : seconds(0) {
  }

  virtual ~StorageMonitorService_getCacheStorageStat_args() noexcept;
  int32_t seconds;

  _StorageMonitorService_getCacheStorageStat_args__isset __isset;

  void __set_seconds(const int32_t val);

  bool operator == (const StorageMonitorService_getCacheStorageStat_args & rhs) const
  {
    if (!(seconds == rhs.seconds))
      return false;
    return true;
  }
  bool operator != (const StorageMonitorService_getCacheStorageStat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_getCacheStorageStat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_getCacheStorageStat_pargs {
 public:


  virtual ~StorageMonitorService_getCacheStorageStat_pargs() noexcept;
  const int32_t* seconds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageMonitorService_getCacheStorageStat_result__isset {
  _StorageMonitorService_getCacheStorageStat_result__isset() : success(false) {}
  bool success :1;
} _StorageMonitorService_getCacheStorageStat_result__isset;

class StorageMonitorService_getCacheStorageStat_result {
 public:

  StorageMonitorService_getCacheStorageStat_result(const StorageMonitorService_getCacheStorageStat_result&);
  StorageMonitorService_getCacheStorageStat_result& operator=(const StorageMonitorService_getCacheStorageStat_result&);
  StorageMonitorService_getCacheStorageStat_result() noexcept {
  }

  virtual ~StorageMonitorService_getCacheStorageStat_result() noexcept;
  backendStat success;

  _StorageMonitorService_getCacheStorageStat_result__isset __isset;

  void __set_success(const backendStat& val);

  bool operator == (const StorageMonitorService_getCacheStorageStat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StorageMonitorService_getCacheStorageStat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_getCacheStorageStat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageMonitorService_getCacheStorageStat_presult__isset {
  _StorageMonitorService_getCacheStorageStat_presult__isset() : success(false) {}
  bool success :1;
} _StorageMonitorService_getCacheStorageStat_presult__isset;

class StorageMonitorService_getCacheStorageStat_presult {
 public:


  virtual ~StorageMonitorService_getCacheStorageStat_presult() noexcept;
  backendStat* success;

  _StorageMonitorService_getCacheStorageStat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StorageMonitorService_enableStorageBackend_args__isset {
  _StorageMonitorService_enableStorageBackend_args__isset() : isRead(false), isEnable(false), beName(false) {}
  bool isRead :1;
  bool isEnable :1;
  bool beName :1;
} _StorageMonitorService_enableStorageBackend_args__isset;

class StorageMonitorService_enableStorageBackend_args {
 public:

  StorageMonitorService_enableStorageBackend_args(const StorageMonitorService_enableStorageBackend_args&);
  StorageMonitorService_enableStorageBackend_args& operator=(const StorageMonitorService_enableStorageBackend_args&);
  StorageMonitorService_enableStorageBackend_args() noexcept
                                                  : isRead(0),
                                                    isEnable(0),
                                                    beName() {
  }

  virtual ~StorageMonitorService_enableStorageBackend_args() noexcept;
  bool isRead;
  bool isEnable;
  std::string beName;

  _StorageMonitorService_enableStorageBackend_args__isset __isset;

  void __set_isRead(const bool val);

  void __set_isEnable(const bool val);

  void __set_beName(const std::string& val);

  bool operator == (const StorageMonitorService_enableStorageBackend_args & rhs) const
  {
    if (!(isRead == rhs.isRead))
      return false;
    if (!(isEnable == rhs.isEnable))
      return false;
    if (!(beName == rhs.beName))
      return false;
    return true;
  }
  bool operator != (const StorageMonitorService_enableStorageBackend_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_enableStorageBackend_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_enableStorageBackend_pargs {
 public:


  virtual ~StorageMonitorService_enableStorageBackend_pargs() noexcept;
  const bool* isRead;
  const bool* isEnable;
  const std::string* beName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_enableStorageBackend_result {
 public:

  StorageMonitorService_enableStorageBackend_result(const StorageMonitorService_enableStorageBackend_result&) noexcept;
  StorageMonitorService_enableStorageBackend_result& operator=(const StorageMonitorService_enableStorageBackend_result&) noexcept;
  StorageMonitorService_enableStorageBackend_result() noexcept {
  }

  virtual ~StorageMonitorService_enableStorageBackend_result() noexcept;

  bool operator == (const StorageMonitorService_enableStorageBackend_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StorageMonitorService_enableStorageBackend_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_enableStorageBackend_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_enableStorageBackend_presult {
 public:


  virtual ~StorageMonitorService_enableStorageBackend_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StorageMonitorService_setCacheMaxSize_args__isset {
  _StorageMonitorService_setCacheMaxSize_args__isset() : newMaxSize(false) {}
  bool newMaxSize :1;
} _StorageMonitorService_setCacheMaxSize_args__isset;

class StorageMonitorService_setCacheMaxSize_args {
 public:

  StorageMonitorService_setCacheMaxSize_args(const StorageMonitorService_setCacheMaxSize_args&) noexcept;
  StorageMonitorService_setCacheMaxSize_args& operator=(const StorageMonitorService_setCacheMaxSize_args&) noexcept;
  StorageMonitorService_setCacheMaxSize_args() noexcept
                                             : newMaxSize(0) {
  }

  virtual ~StorageMonitorService_setCacheMaxSize_args() noexcept;
  int32_t newMaxSize;

  _StorageMonitorService_setCacheMaxSize_args__isset __isset;

  void __set_newMaxSize(const int32_t val);

  bool operator == (const StorageMonitorService_setCacheMaxSize_args & rhs) const
  {
    if (!(newMaxSize == rhs.newMaxSize))
      return false;
    return true;
  }
  bool operator != (const StorageMonitorService_setCacheMaxSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_setCacheMaxSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_setCacheMaxSize_pargs {
 public:


  virtual ~StorageMonitorService_setCacheMaxSize_pargs() noexcept;
  const int32_t* newMaxSize;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_setCacheMaxSize_result {
 public:

  StorageMonitorService_setCacheMaxSize_result(const StorageMonitorService_setCacheMaxSize_result&) noexcept;
  StorageMonitorService_setCacheMaxSize_result& operator=(const StorageMonitorService_setCacheMaxSize_result&) noexcept;
  StorageMonitorService_setCacheMaxSize_result() noexcept {
  }

  virtual ~StorageMonitorService_setCacheMaxSize_result() noexcept;

  bool operator == (const StorageMonitorService_setCacheMaxSize_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StorageMonitorService_setCacheMaxSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_setCacheMaxSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_setCacheMaxSize_presult {
 public:


  virtual ~StorageMonitorService_setCacheMaxSize_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StorageMonitorService_saveDataToBackend_args__isset {
  _StorageMonitorService_saveDataToBackend_args__isset() : enable(false) {}
  bool enable :1;
} _StorageMonitorService_saveDataToBackend_args__isset;

class StorageMonitorService_saveDataToBackend_args {
 public:

  StorageMonitorService_saveDataToBackend_args(const StorageMonitorService_saveDataToBackend_args&) noexcept;
  StorageMonitorService_saveDataToBackend_args& operator=(const StorageMonitorService_saveDataToBackend_args&) noexcept;
  StorageMonitorService_saveDataToBackend_args() noexcept
                                               : enable(0) {
  }

  virtual ~StorageMonitorService_saveDataToBackend_args() noexcept;
  bool enable;

  _StorageMonitorService_saveDataToBackend_args__isset __isset;

  void __set_enable(const bool val);

  bool operator == (const StorageMonitorService_saveDataToBackend_args & rhs) const
  {
    if (!(enable == rhs.enable))
      return false;
    return true;
  }
  bool operator != (const StorageMonitorService_saveDataToBackend_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_saveDataToBackend_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_saveDataToBackend_pargs {
 public:


  virtual ~StorageMonitorService_saveDataToBackend_pargs() noexcept;
  const bool* enable;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_saveDataToBackend_result {
 public:

  StorageMonitorService_saveDataToBackend_result(const StorageMonitorService_saveDataToBackend_result&) noexcept;
  StorageMonitorService_saveDataToBackend_result& operator=(const StorageMonitorService_saveDataToBackend_result&) noexcept;
  StorageMonitorService_saveDataToBackend_result() noexcept {
  }

  virtual ~StorageMonitorService_saveDataToBackend_result() noexcept;

  bool operator == (const StorageMonitorService_saveDataToBackend_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StorageMonitorService_saveDataToBackend_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_saveDataToBackend_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_saveDataToBackend_presult {
 public:


  virtual ~StorageMonitorService_saveDataToBackend_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StorageMonitorService_enableWarming_args__isset {
  _StorageMonitorService_enableWarming_args__isset() : enable(false) {}
  bool enable :1;
} _StorageMonitorService_enableWarming_args__isset;

class StorageMonitorService_enableWarming_args {
 public:

  StorageMonitorService_enableWarming_args(const StorageMonitorService_enableWarming_args&) noexcept;
  StorageMonitorService_enableWarming_args& operator=(const StorageMonitorService_enableWarming_args&) noexcept;
  StorageMonitorService_enableWarming_args() noexcept
                                           : enable(0) {
  }

  virtual ~StorageMonitorService_enableWarming_args() noexcept;
  bool enable;

  _StorageMonitorService_enableWarming_args__isset __isset;

  void __set_enable(const bool val);

  bool operator == (const StorageMonitorService_enableWarming_args & rhs) const
  {
    if (!(enable == rhs.enable))
      return false;
    return true;
  }
  bool operator != (const StorageMonitorService_enableWarming_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_enableWarming_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_enableWarming_pargs {
 public:


  virtual ~StorageMonitorService_enableWarming_pargs() noexcept;
  const bool* enable;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_enableWarming_result {
 public:

  StorageMonitorService_enableWarming_result(const StorageMonitorService_enableWarming_result&) noexcept;
  StorageMonitorService_enableWarming_result& operator=(const StorageMonitorService_enableWarming_result&) noexcept;
  StorageMonitorService_enableWarming_result() noexcept {
  }

  virtual ~StorageMonitorService_enableWarming_result() noexcept;

  bool operator == (const StorageMonitorService_enableWarming_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StorageMonitorService_enableWarming_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_enableWarming_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_enableWarming_presult {
 public:


  virtual ~StorageMonitorService_enableWarming_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StorageMonitorService_compactData_args__isset {
  _StorageMonitorService_compactData_args__isset() : storageName(false) {}
  bool storageName :1;
} _StorageMonitorService_compactData_args__isset;

class StorageMonitorService_compactData_args {
 public:

  StorageMonitorService_compactData_args(const StorageMonitorService_compactData_args&);
  StorageMonitorService_compactData_args& operator=(const StorageMonitorService_compactData_args&);
  StorageMonitorService_compactData_args() noexcept
                                         : storageName() {
  }

  virtual ~StorageMonitorService_compactData_args() noexcept;
  std::string storageName;

  _StorageMonitorService_compactData_args__isset __isset;

  void __set_storageName(const std::string& val);

  bool operator == (const StorageMonitorService_compactData_args & rhs) const
  {
    if (!(storageName == rhs.storageName))
      return false;
    return true;
  }
  bool operator != (const StorageMonitorService_compactData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_compactData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_compactData_pargs {
 public:


  virtual ~StorageMonitorService_compactData_pargs() noexcept;
  const std::string* storageName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_compactData_result {
 public:

  StorageMonitorService_compactData_result(const StorageMonitorService_compactData_result&) noexcept;
  StorageMonitorService_compactData_result& operator=(const StorageMonitorService_compactData_result&) noexcept;
  StorageMonitorService_compactData_result() noexcept {
  }

  virtual ~StorageMonitorService_compactData_result() noexcept;

  bool operator == (const StorageMonitorService_compactData_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StorageMonitorService_compactData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_compactData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_compactData_presult {
 public:


  virtual ~StorageMonitorService_compactData_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StorageMonitorService_closeStorage_args__isset {
  _StorageMonitorService_closeStorage_args__isset() : stgName(false) {}
  bool stgName :1;
} _StorageMonitorService_closeStorage_args__isset;

class StorageMonitorService_closeStorage_args {
 public:

  StorageMonitorService_closeStorage_args(const StorageMonitorService_closeStorage_args&);
  StorageMonitorService_closeStorage_args& operator=(const StorageMonitorService_closeStorage_args&);
  StorageMonitorService_closeStorage_args() noexcept
                                          : stgName() {
  }

  virtual ~StorageMonitorService_closeStorage_args() noexcept;
  std::string stgName;

  _StorageMonitorService_closeStorage_args__isset __isset;

  void __set_stgName(const std::string& val);

  bool operator == (const StorageMonitorService_closeStorage_args & rhs) const
  {
    if (!(stgName == rhs.stgName))
      return false;
    return true;
  }
  bool operator != (const StorageMonitorService_closeStorage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_closeStorage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_closeStorage_pargs {
 public:


  virtual ~StorageMonitorService_closeStorage_pargs() noexcept;
  const std::string* stgName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_closeStorage_result {
 public:

  StorageMonitorService_closeStorage_result(const StorageMonitorService_closeStorage_result&) noexcept;
  StorageMonitorService_closeStorage_result& operator=(const StorageMonitorService_closeStorage_result&) noexcept;
  StorageMonitorService_closeStorage_result() noexcept {
  }

  virtual ~StorageMonitorService_closeStorage_result() noexcept;

  bool operator == (const StorageMonitorService_closeStorage_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StorageMonitorService_closeStorage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_closeStorage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_closeStorage_presult {
 public:


  virtual ~StorageMonitorService_closeStorage_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StorageMonitorService_openStorage_args__isset {
  _StorageMonitorService_openStorage_args__isset() : stgCreateOption(false) {}
  bool stgCreateOption :1;
} _StorageMonitorService_openStorage_args__isset;

class StorageMonitorService_openStorage_args {
 public:

  StorageMonitorService_openStorage_args(const StorageMonitorService_openStorage_args&);
  StorageMonitorService_openStorage_args& operator=(const StorageMonitorService_openStorage_args&);
  StorageMonitorService_openStorage_args() noexcept
                                         : stgCreateOption() {
  }

  virtual ~StorageMonitorService_openStorage_args() noexcept;
  std::string stgCreateOption;

  _StorageMonitorService_openStorage_args__isset __isset;

  void __set_stgCreateOption(const std::string& val);

  bool operator == (const StorageMonitorService_openStorage_args & rhs) const
  {
    if (!(stgCreateOption == rhs.stgCreateOption))
      return false;
    return true;
  }
  bool operator != (const StorageMonitorService_openStorage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_openStorage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_openStorage_pargs {
 public:


  virtual ~StorageMonitorService_openStorage_pargs() noexcept;
  const std::string* stgCreateOption;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_openStorage_result {
 public:

  StorageMonitorService_openStorage_result(const StorageMonitorService_openStorage_result&) noexcept;
  StorageMonitorService_openStorage_result& operator=(const StorageMonitorService_openStorage_result&) noexcept;
  StorageMonitorService_openStorage_result() noexcept {
  }

  virtual ~StorageMonitorService_openStorage_result() noexcept;

  bool operator == (const StorageMonitorService_openStorage_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StorageMonitorService_openStorage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_openStorage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_openStorage_presult {
 public:


  virtual ~StorageMonitorService_openStorage_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class StorageMonitorService_getZKServicePath_args {
 public:

  StorageMonitorService_getZKServicePath_args(const StorageMonitorService_getZKServicePath_args&) noexcept;
  StorageMonitorService_getZKServicePath_args& operator=(const StorageMonitorService_getZKServicePath_args&) noexcept;
  StorageMonitorService_getZKServicePath_args() noexcept {
  }

  virtual ~StorageMonitorService_getZKServicePath_args() noexcept;

  bool operator == (const StorageMonitorService_getZKServicePath_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StorageMonitorService_getZKServicePath_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_getZKServicePath_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_getZKServicePath_pargs {
 public:


  virtual ~StorageMonitorService_getZKServicePath_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageMonitorService_getZKServicePath_result__isset {
  _StorageMonitorService_getZKServicePath_result__isset() : success(false) {}
  bool success :1;
} _StorageMonitorService_getZKServicePath_result__isset;

class StorageMonitorService_getZKServicePath_result {
 public:

  StorageMonitorService_getZKServicePath_result(const StorageMonitorService_getZKServicePath_result&);
  StorageMonitorService_getZKServicePath_result& operator=(const StorageMonitorService_getZKServicePath_result&);
  StorageMonitorService_getZKServicePath_result() noexcept
                                                : success() {
  }

  virtual ~StorageMonitorService_getZKServicePath_result() noexcept;
  std::string success;

  _StorageMonitorService_getZKServicePath_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const StorageMonitorService_getZKServicePath_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StorageMonitorService_getZKServicePath_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_getZKServicePath_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageMonitorService_getZKServicePath_presult__isset {
  _StorageMonitorService_getZKServicePath_presult__isset() : success(false) {}
  bool success :1;
} _StorageMonitorService_getZKServicePath_presult__isset;

class StorageMonitorService_getZKServicePath_presult {
 public:


  virtual ~StorageMonitorService_getZKServicePath_presult() noexcept;
  std::string* success;

  _StorageMonitorService_getZKServicePath_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class StorageMonitorService_getZKConfigPath_args {
 public:

  StorageMonitorService_getZKConfigPath_args(const StorageMonitorService_getZKConfigPath_args&) noexcept;
  StorageMonitorService_getZKConfigPath_args& operator=(const StorageMonitorService_getZKConfigPath_args&) noexcept;
  StorageMonitorService_getZKConfigPath_args() noexcept {
  }

  virtual ~StorageMonitorService_getZKConfigPath_args() noexcept;

  bool operator == (const StorageMonitorService_getZKConfigPath_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StorageMonitorService_getZKConfigPath_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_getZKConfigPath_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_getZKConfigPath_pargs {
 public:


  virtual ~StorageMonitorService_getZKConfigPath_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageMonitorService_getZKConfigPath_result__isset {
  _StorageMonitorService_getZKConfigPath_result__isset() : success(false) {}
  bool success :1;
} _StorageMonitorService_getZKConfigPath_result__isset;

class StorageMonitorService_getZKConfigPath_result {
 public:

  StorageMonitorService_getZKConfigPath_result(const StorageMonitorService_getZKConfigPath_result&);
  StorageMonitorService_getZKConfigPath_result& operator=(const StorageMonitorService_getZKConfigPath_result&);
  StorageMonitorService_getZKConfigPath_result() noexcept
                                               : success() {
  }

  virtual ~StorageMonitorService_getZKConfigPath_result() noexcept;
  std::string success;

  _StorageMonitorService_getZKConfigPath_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const StorageMonitorService_getZKConfigPath_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StorageMonitorService_getZKConfigPath_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_getZKConfigPath_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageMonitorService_getZKConfigPath_presult__isset {
  _StorageMonitorService_getZKConfigPath_presult__isset() : success(false) {}
  bool success :1;
} _StorageMonitorService_getZKConfigPath_presult__isset;

class StorageMonitorService_getZKConfigPath_presult {
 public:


  virtual ~StorageMonitorService_getZKConfigPath_presult() noexcept;
  std::string* success;

  _StorageMonitorService_getZKConfigPath_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class StorageMonitorService_checkZKService_args {
 public:

  StorageMonitorService_checkZKService_args(const StorageMonitorService_checkZKService_args&) noexcept;
  StorageMonitorService_checkZKService_args& operator=(const StorageMonitorService_checkZKService_args&) noexcept;
  StorageMonitorService_checkZKService_args() noexcept {
  }

  virtual ~StorageMonitorService_checkZKService_args() noexcept;

  bool operator == (const StorageMonitorService_checkZKService_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StorageMonitorService_checkZKService_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_checkZKService_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_checkZKService_pargs {
 public:


  virtual ~StorageMonitorService_checkZKService_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_checkZKService_result {
 public:

  StorageMonitorService_checkZKService_result(const StorageMonitorService_checkZKService_result&) noexcept;
  StorageMonitorService_checkZKService_result& operator=(const StorageMonitorService_checkZKService_result&) noexcept;
  StorageMonitorService_checkZKService_result() noexcept {
  }

  virtual ~StorageMonitorService_checkZKService_result() noexcept;

  bool operator == (const StorageMonitorService_checkZKService_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StorageMonitorService_checkZKService_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_checkZKService_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_checkZKService_presult {
 public:


  virtual ~StorageMonitorService_checkZKService_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class StorageMonitorService_checkZKConfigPath_args {
 public:

  StorageMonitorService_checkZKConfigPath_args(const StorageMonitorService_checkZKConfigPath_args&) noexcept;
  StorageMonitorService_checkZKConfigPath_args& operator=(const StorageMonitorService_checkZKConfigPath_args&) noexcept;
  StorageMonitorService_checkZKConfigPath_args() noexcept {
  }

  virtual ~StorageMonitorService_checkZKConfigPath_args() noexcept;

  bool operator == (const StorageMonitorService_checkZKConfigPath_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StorageMonitorService_checkZKConfigPath_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_checkZKConfigPath_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_checkZKConfigPath_pargs {
 public:


  virtual ~StorageMonitorService_checkZKConfigPath_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_checkZKConfigPath_result {
 public:

  StorageMonitorService_checkZKConfigPath_result(const StorageMonitorService_checkZKConfigPath_result&) noexcept;
  StorageMonitorService_checkZKConfigPath_result& operator=(const StorageMonitorService_checkZKConfigPath_result&) noexcept;
  StorageMonitorService_checkZKConfigPath_result() noexcept {
  }

  virtual ~StorageMonitorService_checkZKConfigPath_result() noexcept;

  bool operator == (const StorageMonitorService_checkZKConfigPath_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StorageMonitorService_checkZKConfigPath_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_checkZKConfigPath_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_checkZKConfigPath_presult {
 public:


  virtual ~StorageMonitorService_checkZKConfigPath_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StorageMonitorService_registerServiceZK_args__isset {
  _StorageMonitorService_registerServiceZK_args__isset() : basePath(false), scheme(false) {}
  bool basePath :1;
  bool scheme :1;
} _StorageMonitorService_registerServiceZK_args__isset;

class StorageMonitorService_registerServiceZK_args {
 public:

  StorageMonitorService_registerServiceZK_args(const StorageMonitorService_registerServiceZK_args&);
  StorageMonitorService_registerServiceZK_args& operator=(const StorageMonitorService_registerServiceZK_args&);
  StorageMonitorService_registerServiceZK_args() noexcept
                                               : basePath(),
                                                 scheme() {
  }

  virtual ~StorageMonitorService_registerServiceZK_args() noexcept;
  std::string basePath;
  std::string scheme;

  _StorageMonitorService_registerServiceZK_args__isset __isset;

  void __set_basePath(const std::string& val);

  void __set_scheme(const std::string& val);

  bool operator == (const StorageMonitorService_registerServiceZK_args & rhs) const
  {
    if (!(basePath == rhs.basePath))
      return false;
    if (!(scheme == rhs.scheme))
      return false;
    return true;
  }
  bool operator != (const StorageMonitorService_registerServiceZK_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_registerServiceZK_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_registerServiceZK_pargs {
 public:


  virtual ~StorageMonitorService_registerServiceZK_pargs() noexcept;
  const std::string* basePath;
  const std::string* scheme;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_registerServiceZK_result {
 public:

  StorageMonitorService_registerServiceZK_result(const StorageMonitorService_registerServiceZK_result&) noexcept;
  StorageMonitorService_registerServiceZK_result& operator=(const StorageMonitorService_registerServiceZK_result&) noexcept;
  StorageMonitorService_registerServiceZK_result() noexcept {
  }

  virtual ~StorageMonitorService_registerServiceZK_result() noexcept;

  bool operator == (const StorageMonitorService_registerServiceZK_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StorageMonitorService_registerServiceZK_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_registerServiceZK_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_registerServiceZK_presult {
 public:


  virtual ~StorageMonitorService_registerServiceZK_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StorageMonitorService_registerConfigZK_args__isset {
  _StorageMonitorService_registerConfigZK_args__isset() : basePath(false), scheme(false) {}
  bool basePath :1;
  bool scheme :1;
} _StorageMonitorService_registerConfigZK_args__isset;

class StorageMonitorService_registerConfigZK_args {
 public:

  StorageMonitorService_registerConfigZK_args(const StorageMonitorService_registerConfigZK_args&);
  StorageMonitorService_registerConfigZK_args& operator=(const StorageMonitorService_registerConfigZK_args&);
  StorageMonitorService_registerConfigZK_args() noexcept
                                              : basePath(),
                                                scheme() {
  }

  virtual ~StorageMonitorService_registerConfigZK_args() noexcept;
  std::string basePath;
  std::string scheme;

  _StorageMonitorService_registerConfigZK_args__isset __isset;

  void __set_basePath(const std::string& val);

  void __set_scheme(const std::string& val);

  bool operator == (const StorageMonitorService_registerConfigZK_args & rhs) const
  {
    if (!(basePath == rhs.basePath))
      return false;
    if (!(scheme == rhs.scheme))
      return false;
    return true;
  }
  bool operator != (const StorageMonitorService_registerConfigZK_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_registerConfigZK_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_registerConfigZK_pargs {
 public:


  virtual ~StorageMonitorService_registerConfigZK_pargs() noexcept;
  const std::string* basePath;
  const std::string* scheme;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_registerConfigZK_result {
 public:

  StorageMonitorService_registerConfigZK_result(const StorageMonitorService_registerConfigZK_result&) noexcept;
  StorageMonitorService_registerConfigZK_result& operator=(const StorageMonitorService_registerConfigZK_result&) noexcept;
  StorageMonitorService_registerConfigZK_result() noexcept {
  }

  virtual ~StorageMonitorService_registerConfigZK_result() noexcept;

  bool operator == (const StorageMonitorService_registerConfigZK_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StorageMonitorService_registerConfigZK_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_registerConfigZK_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_registerConfigZK_presult {
 public:


  virtual ~StorageMonitorService_registerConfigZK_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StorageMonitorService_addListenServicePort_args__isset {
  _StorageMonitorService_addListenServicePort_args__isset() : newPort(false) {}
  bool newPort :1;
} _StorageMonitorService_addListenServicePort_args__isset;

class StorageMonitorService_addListenServicePort_args {
 public:

  StorageMonitorService_addListenServicePort_args(const StorageMonitorService_addListenServicePort_args&) noexcept;
  StorageMonitorService_addListenServicePort_args& operator=(const StorageMonitorService_addListenServicePort_args&) noexcept;
  StorageMonitorService_addListenServicePort_args() noexcept
                                                  : newPort(0) {
  }

  virtual ~StorageMonitorService_addListenServicePort_args() noexcept;
  int32_t newPort;

  _StorageMonitorService_addListenServicePort_args__isset __isset;

  void __set_newPort(const int32_t val);

  bool operator == (const StorageMonitorService_addListenServicePort_args & rhs) const
  {
    if (!(newPort == rhs.newPort))
      return false;
    return true;
  }
  bool operator != (const StorageMonitorService_addListenServicePort_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_addListenServicePort_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_addListenServicePort_pargs {
 public:


  virtual ~StorageMonitorService_addListenServicePort_pargs() noexcept;
  const int32_t* newPort;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_addListenServicePort_result {
 public:

  StorageMonitorService_addListenServicePort_result(const StorageMonitorService_addListenServicePort_result&) noexcept;
  StorageMonitorService_addListenServicePort_result& operator=(const StorageMonitorService_addListenServicePort_result&) noexcept;
  StorageMonitorService_addListenServicePort_result() noexcept {
  }

  virtual ~StorageMonitorService_addListenServicePort_result() noexcept;

  bool operator == (const StorageMonitorService_addListenServicePort_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StorageMonitorService_addListenServicePort_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageMonitorService_addListenServicePort_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageMonitorService_addListenServicePort_presult {
 public:


  virtual ~StorageMonitorService_addListenServicePort_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class StorageMonitorServiceClient : virtual public StorageMonitorServiceIf, public  ::openstars::base::monitor::MonitorReadServiceClient {
 public:
  StorageMonitorServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::openstars::base::monitor::MonitorReadServiceClient(prot, prot) {}
  StorageMonitorServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::openstars::base::monitor::MonitorReadServiceClient(iprot, oprot) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getCurrentCacheStorageStat(backendStat& _return) override;
  void send_getCurrentCacheStorageStat();
  void recv_getCurrentCacheStorageStat(backendStat& _return);
  void getCacheStorageStat(backendStat& _return, const int32_t seconds) override;
  void send_getCacheStorageStat(const int32_t seconds);
  void recv_getCacheStorageStat(backendStat& _return);
  void enableStorageBackend(const bool isRead, const bool isEnable, const std::string& beName) override;
  void send_enableStorageBackend(const bool isRead, const bool isEnable, const std::string& beName);
  void recv_enableStorageBackend();
  void setCacheMaxSize(const int32_t newMaxSize) override;
  void send_setCacheMaxSize(const int32_t newMaxSize);
  void recv_setCacheMaxSize();
  void saveDataToBackend(const bool enable) override;
  void send_saveDataToBackend(const bool enable);
  void recv_saveDataToBackend();
  void enableWarming(const bool enable) override;
  void send_enableWarming(const bool enable);
  void recv_enableWarming();
  void compactData(const std::string& storageName) override;
  void send_compactData(const std::string& storageName);
  void recv_compactData();
  void closeStorage(const std::string& stgName) override;
  void send_closeStorage(const std::string& stgName);
  void recv_closeStorage();
  void openStorage(const std::string& stgCreateOption) override;
  void send_openStorage(const std::string& stgCreateOption);
  void recv_openStorage();
  void getZKServicePath(std::string& _return) override;
  void send_getZKServicePath();
  void recv_getZKServicePath(std::string& _return);
  void getZKConfigPath(std::string& _return) override;
  void send_getZKConfigPath();
  void recv_getZKConfigPath(std::string& _return);
  void checkZKService() override;
  void send_checkZKService();
  void recv_checkZKService();
  void checkZKConfigPath() override;
  void send_checkZKConfigPath();
  void recv_checkZKConfigPath();
  void registerServiceZK(const std::string& basePath, const std::string& scheme) override;
  void send_registerServiceZK(const std::string& basePath, const std::string& scheme);
  void recv_registerServiceZK();
  void registerConfigZK(const std::string& basePath, const std::string& scheme) override;
  void send_registerConfigZK(const std::string& basePath, const std::string& scheme);
  void recv_registerConfigZK();
  void addListenServicePort(const int32_t newPort) override;
  void send_addListenServicePort(const int32_t newPort);
  void recv_addListenServicePort();
};

class StorageMonitorServiceProcessor : public  ::openstars::base::monitor::MonitorReadServiceProcessor {
 protected:
  ::std::shared_ptr<StorageMonitorServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (StorageMonitorServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getCurrentCacheStorageStat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCacheStorageStat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_enableStorageBackend(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setCacheMaxSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveDataToBackend(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_enableWarming(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_compactData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_closeStorage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_openStorage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getZKServicePath(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getZKConfigPath(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkZKService(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkZKConfigPath(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerServiceZK(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registerConfigZK(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addListenServicePort(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  StorageMonitorServiceProcessor(::std::shared_ptr<StorageMonitorServiceIf> iface) :
     ::openstars::base::monitor::MonitorReadServiceProcessor(iface),
    iface_(iface) {
    processMap_["getCurrentCacheStorageStat"] = &StorageMonitorServiceProcessor::process_getCurrentCacheStorageStat;
    processMap_["getCacheStorageStat"] = &StorageMonitorServiceProcessor::process_getCacheStorageStat;
    processMap_["enableStorageBackend"] = &StorageMonitorServiceProcessor::process_enableStorageBackend;
    processMap_["setCacheMaxSize"] = &StorageMonitorServiceProcessor::process_setCacheMaxSize;
    processMap_["saveDataToBackend"] = &StorageMonitorServiceProcessor::process_saveDataToBackend;
    processMap_["enableWarming"] = &StorageMonitorServiceProcessor::process_enableWarming;
    processMap_["compactData"] = &StorageMonitorServiceProcessor::process_compactData;
    processMap_["closeStorage"] = &StorageMonitorServiceProcessor::process_closeStorage;
    processMap_["openStorage"] = &StorageMonitorServiceProcessor::process_openStorage;
    processMap_["getZKServicePath"] = &StorageMonitorServiceProcessor::process_getZKServicePath;
    processMap_["getZKConfigPath"] = &StorageMonitorServiceProcessor::process_getZKConfigPath;
    processMap_["checkZKService"] = &StorageMonitorServiceProcessor::process_checkZKService;
    processMap_["checkZKConfigPath"] = &StorageMonitorServiceProcessor::process_checkZKConfigPath;
    processMap_["registerServiceZK"] = &StorageMonitorServiceProcessor::process_registerServiceZK;
    processMap_["registerConfigZK"] = &StorageMonitorServiceProcessor::process_registerConfigZK;
    processMap_["addListenServicePort"] = &StorageMonitorServiceProcessor::process_addListenServicePort;
  }

  virtual ~StorageMonitorServiceProcessor() {}
};

class StorageMonitorServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  StorageMonitorServiceProcessorFactory(const ::std::shared_ptr< StorageMonitorServiceIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< StorageMonitorServiceIfFactory > handlerFactory_;
};

class StorageMonitorServiceMultiface : virtual public StorageMonitorServiceIf, public  ::openstars::base::monitor::MonitorReadServiceMultiface {
 public:
  StorageMonitorServiceMultiface(std::vector<std::shared_ptr<StorageMonitorServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<std::shared_ptr<StorageMonitorServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::openstars::base::monitor::MonitorReadServiceMultiface::add(*iter);
    }
  }
  virtual ~StorageMonitorServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<StorageMonitorServiceIf> > ifaces_;
  StorageMonitorServiceMultiface() {}
  void add(::std::shared_ptr<StorageMonitorServiceIf> iface) {
     ::openstars::base::monitor::MonitorReadServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void getCurrentCacheStorageStat(backendStat& _return) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCurrentCacheStorageStat(_return);
    }
    ifaces_[i]->getCurrentCacheStorageStat(_return);
    return;
  }

  void getCacheStorageStat(backendStat& _return, const int32_t seconds) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCacheStorageStat(_return, seconds);
    }
    ifaces_[i]->getCacheStorageStat(_return, seconds);
    return;
  }

  void enableStorageBackend(const bool isRead, const bool isEnable, const std::string& beName) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->enableStorageBackend(isRead, isEnable, beName);
    }
    ifaces_[i]->enableStorageBackend(isRead, isEnable, beName);
  }

  void setCacheMaxSize(const int32_t newMaxSize) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setCacheMaxSize(newMaxSize);
    }
    ifaces_[i]->setCacheMaxSize(newMaxSize);
  }

  void saveDataToBackend(const bool enable) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveDataToBackend(enable);
    }
    ifaces_[i]->saveDataToBackend(enable);
  }

  void enableWarming(const bool enable) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->enableWarming(enable);
    }
    ifaces_[i]->enableWarming(enable);
  }

  void compactData(const std::string& storageName) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->compactData(storageName);
    }
    ifaces_[i]->compactData(storageName);
  }

  void closeStorage(const std::string& stgName) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->closeStorage(stgName);
    }
    ifaces_[i]->closeStorage(stgName);
  }

  void openStorage(const std::string& stgCreateOption) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->openStorage(stgCreateOption);
    }
    ifaces_[i]->openStorage(stgCreateOption);
  }

  void getZKServicePath(std::string& _return) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getZKServicePath(_return);
    }
    ifaces_[i]->getZKServicePath(_return);
    return;
  }

  void getZKConfigPath(std::string& _return) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getZKConfigPath(_return);
    }
    ifaces_[i]->getZKConfigPath(_return);
    return;
  }

  void checkZKService() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkZKService();
    }
    ifaces_[i]->checkZKService();
  }

  void checkZKConfigPath() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkZKConfigPath();
    }
    ifaces_[i]->checkZKConfigPath();
  }

  void registerServiceZK(const std::string& basePath, const std::string& scheme) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerServiceZK(basePath, scheme);
    }
    ifaces_[i]->registerServiceZK(basePath, scheme);
  }

  void registerConfigZK(const std::string& basePath, const std::string& scheme) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerConfigZK(basePath, scheme);
    }
    ifaces_[i]->registerConfigZK(basePath, scheme);
  }

  void addListenServicePort(const int32_t newPort) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addListenServicePort(newPort);
    }
    ifaces_[i]->addListenServicePort(newPort);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class StorageMonitorServiceConcurrentClient : virtual public StorageMonitorServiceIf, public  ::openstars::base::monitor::MonitorReadServiceConcurrentClient {
 public:
  StorageMonitorServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :
     ::openstars::base::monitor::MonitorReadServiceConcurrentClient(prot, prot, sync) {}
  StorageMonitorServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) :     ::openstars::base::monitor::MonitorReadServiceConcurrentClient(iprot, oprot, sync) {}
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getCurrentCacheStorageStat(backendStat& _return) override;
  int32_t send_getCurrentCacheStorageStat();
  void recv_getCurrentCacheStorageStat(backendStat& _return, const int32_t seqid);
  void getCacheStorageStat(backendStat& _return, const int32_t seconds) override;
  int32_t send_getCacheStorageStat(const int32_t seconds);
  void recv_getCacheStorageStat(backendStat& _return, const int32_t seqid);
  void enableStorageBackend(const bool isRead, const bool isEnable, const std::string& beName) override;
  int32_t send_enableStorageBackend(const bool isRead, const bool isEnable, const std::string& beName);
  void recv_enableStorageBackend(const int32_t seqid);
  void setCacheMaxSize(const int32_t newMaxSize) override;
  int32_t send_setCacheMaxSize(const int32_t newMaxSize);
  void recv_setCacheMaxSize(const int32_t seqid);
  void saveDataToBackend(const bool enable) override;
  int32_t send_saveDataToBackend(const bool enable);
  void recv_saveDataToBackend(const int32_t seqid);
  void enableWarming(const bool enable) override;
  int32_t send_enableWarming(const bool enable);
  void recv_enableWarming(const int32_t seqid);
  void compactData(const std::string& storageName) override;
  int32_t send_compactData(const std::string& storageName);
  void recv_compactData(const int32_t seqid);
  void closeStorage(const std::string& stgName) override;
  int32_t send_closeStorage(const std::string& stgName);
  void recv_closeStorage(const int32_t seqid);
  void openStorage(const std::string& stgCreateOption) override;
  int32_t send_openStorage(const std::string& stgCreateOption);
  void recv_openStorage(const int32_t seqid);
  void getZKServicePath(std::string& _return) override;
  int32_t send_getZKServicePath();
  void recv_getZKServicePath(std::string& _return, const int32_t seqid);
  void getZKConfigPath(std::string& _return) override;
  int32_t send_getZKConfigPath();
  void recv_getZKConfigPath(std::string& _return, const int32_t seqid);
  void checkZKService() override;
  int32_t send_checkZKService();
  void recv_checkZKService(const int32_t seqid);
  void checkZKConfigPath() override;
  int32_t send_checkZKConfigPath();
  void recv_checkZKConfigPath(const int32_t seqid);
  void registerServiceZK(const std::string& basePath, const std::string& scheme) override;
  int32_t send_registerServiceZK(const std::string& basePath, const std::string& scheme);
  void recv_registerServiceZK(const int32_t seqid);
  void registerConfigZK(const std::string& basePath, const std::string& scheme) override;
  int32_t send_registerConfigZK(const std::string& basePath, const std::string& scheme);
  void recv_registerConfigZK(const int32_t seqid);
  void addListenServicePort(const int32_t newPort) override;
  int32_t send_addListenServicePort(const int32_t newPort);
  void recv_addListenServicePort(const int32_t seqid);
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}}} // namespace

#endif
