/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MonitorReadService_H
#define MonitorReadService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "monitor_types.h"
#include "OpenBaseService.h"

namespace openstars { namespace base { namespace monitor {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MonitorReadServiceIf : virtual public  ::openstars::base::OpenBaseServiceIf {
 public:
  virtual ~MonitorReadServiceIf() {}
  virtual void getCurrentStat(systemStat& _return) = 0;
  virtual void getStat(systemStat& _return, const int32_t seconds) = 0;
};

class MonitorReadServiceIfFactory : virtual public  ::openstars::base::OpenBaseServiceIfFactory {
 public:
  typedef MonitorReadServiceIf Handler;

  virtual ~MonitorReadServiceIfFactory() {}

  virtual MonitorReadServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::openstars::base::OpenBaseServiceIf* /* handler */) = 0;
};

class MonitorReadServiceIfSingletonFactory : virtual public MonitorReadServiceIfFactory {
 public:
  MonitorReadServiceIfSingletonFactory(const boost::shared_ptr<MonitorReadServiceIf>& iface) : iface_(iface) {}
  virtual ~MonitorReadServiceIfSingletonFactory() {}

  virtual MonitorReadServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::openstars::base::OpenBaseServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<MonitorReadServiceIf> iface_;
};

class MonitorReadServiceNull : virtual public MonitorReadServiceIf , virtual public  ::openstars::base::OpenBaseServiceNull {
 public:
  virtual ~MonitorReadServiceNull() {}
  void getCurrentStat(systemStat& /* _return */) {
    return;
  }
  void getStat(systemStat& /* _return */, const int32_t /* seconds */) {
    return;
  }
};


class MonitorReadService_getCurrentStat_args {
 public:

  MonitorReadService_getCurrentStat_args(const MonitorReadService_getCurrentStat_args&);
  MonitorReadService_getCurrentStat_args& operator=(const MonitorReadService_getCurrentStat_args&);
  MonitorReadService_getCurrentStat_args() {
  }

  virtual ~MonitorReadService_getCurrentStat_args() throw();

  bool operator == (const MonitorReadService_getCurrentStat_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MonitorReadService_getCurrentStat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MonitorReadService_getCurrentStat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MonitorReadService_getCurrentStat_pargs {
 public:


  virtual ~MonitorReadService_getCurrentStat_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MonitorReadService_getCurrentStat_result__isset {
  _MonitorReadService_getCurrentStat_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MonitorReadService_getCurrentStat_result__isset;

class MonitorReadService_getCurrentStat_result {
 public:

  MonitorReadService_getCurrentStat_result(const MonitorReadService_getCurrentStat_result&);
  MonitorReadService_getCurrentStat_result& operator=(const MonitorReadService_getCurrentStat_result&);
  MonitorReadService_getCurrentStat_result() {
  }

  virtual ~MonitorReadService_getCurrentStat_result() throw();
  systemStat success;
  InvalidOperation e;

  _MonitorReadService_getCurrentStat_result__isset __isset;

  void __set_success(const systemStat& val);

  void __set_e(const InvalidOperation& val);

  bool operator == (const MonitorReadService_getCurrentStat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MonitorReadService_getCurrentStat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MonitorReadService_getCurrentStat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MonitorReadService_getCurrentStat_presult__isset {
  _MonitorReadService_getCurrentStat_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MonitorReadService_getCurrentStat_presult__isset;

class MonitorReadService_getCurrentStat_presult {
 public:


  virtual ~MonitorReadService_getCurrentStat_presult() throw();
  systemStat* success;
  InvalidOperation e;

  _MonitorReadService_getCurrentStat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MonitorReadService_getStat_args__isset {
  _MonitorReadService_getStat_args__isset() : seconds(false) {}
  bool seconds :1;
} _MonitorReadService_getStat_args__isset;

class MonitorReadService_getStat_args {
 public:

  MonitorReadService_getStat_args(const MonitorReadService_getStat_args&);
  MonitorReadService_getStat_args& operator=(const MonitorReadService_getStat_args&);
  MonitorReadService_getStat_args() : seconds(0) {
  }

  virtual ~MonitorReadService_getStat_args() throw();
  int32_t seconds;

  _MonitorReadService_getStat_args__isset __isset;

  void __set_seconds(const int32_t val);

  bool operator == (const MonitorReadService_getStat_args & rhs) const
  {
    if (!(seconds == rhs.seconds))
      return false;
    return true;
  }
  bool operator != (const MonitorReadService_getStat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MonitorReadService_getStat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MonitorReadService_getStat_pargs {
 public:


  virtual ~MonitorReadService_getStat_pargs() throw();
  const int32_t* seconds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MonitorReadService_getStat_result__isset {
  _MonitorReadService_getStat_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MonitorReadService_getStat_result__isset;

class MonitorReadService_getStat_result {
 public:

  MonitorReadService_getStat_result(const MonitorReadService_getStat_result&);
  MonitorReadService_getStat_result& operator=(const MonitorReadService_getStat_result&);
  MonitorReadService_getStat_result() {
  }

  virtual ~MonitorReadService_getStat_result() throw();
  systemStat success;
  InvalidOperation e;

  _MonitorReadService_getStat_result__isset __isset;

  void __set_success(const systemStat& val);

  void __set_e(const InvalidOperation& val);

  bool operator == (const MonitorReadService_getStat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const MonitorReadService_getStat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MonitorReadService_getStat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MonitorReadService_getStat_presult__isset {
  _MonitorReadService_getStat_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _MonitorReadService_getStat_presult__isset;

class MonitorReadService_getStat_presult {
 public:


  virtual ~MonitorReadService_getStat_presult() throw();
  systemStat* success;
  InvalidOperation e;

  _MonitorReadService_getStat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MonitorReadServiceClient : virtual public MonitorReadServiceIf, public  ::openstars::base::OpenBaseServiceClient {
 public:
  MonitorReadServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::openstars::base::OpenBaseServiceClient(prot, prot) {}
  MonitorReadServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::openstars::base::OpenBaseServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getCurrentStat(systemStat& _return);
  void send_getCurrentStat();
  void recv_getCurrentStat(systemStat& _return);
  void getStat(systemStat& _return, const int32_t seconds);
  void send_getStat(const int32_t seconds);
  void recv_getStat(systemStat& _return);
};

class MonitorReadServiceProcessor : public  ::openstars::base::OpenBaseServiceProcessor {
 protected:
  boost::shared_ptr<MonitorReadServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MonitorReadServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getCurrentStat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getStat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MonitorReadServiceProcessor(boost::shared_ptr<MonitorReadServiceIf> iface) :
     ::openstars::base::OpenBaseServiceProcessor(iface),
    iface_(iface) {
    processMap_["getCurrentStat"] = &MonitorReadServiceProcessor::process_getCurrentStat;
    processMap_["getStat"] = &MonitorReadServiceProcessor::process_getStat;
  }

  virtual ~MonitorReadServiceProcessor() {}
};

class MonitorReadServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MonitorReadServiceProcessorFactory(const ::boost::shared_ptr< MonitorReadServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MonitorReadServiceIfFactory > handlerFactory_;
};

class MonitorReadServiceMultiface : virtual public MonitorReadServiceIf, public  ::openstars::base::OpenBaseServiceMultiface {
 public:
  MonitorReadServiceMultiface(std::vector<boost::shared_ptr<MonitorReadServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<MonitorReadServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::openstars::base::OpenBaseServiceMultiface::add(*iter);
    }
  }
  virtual ~MonitorReadServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MonitorReadServiceIf> > ifaces_;
  MonitorReadServiceMultiface() {}
  void add(boost::shared_ptr<MonitorReadServiceIf> iface) {
     ::openstars::base::OpenBaseServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void getCurrentStat(systemStat& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCurrentStat(_return);
    }
    ifaces_[i]->getCurrentStat(_return);
    return;
  }

  void getStat(systemStat& _return, const int32_t seconds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getStat(_return, seconds);
    }
    ifaces_[i]->getStat(_return, seconds);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MonitorReadServiceConcurrentClient : virtual public MonitorReadServiceIf, public  ::openstars::base::OpenBaseServiceConcurrentClient {
 public:
  MonitorReadServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::openstars::base::OpenBaseServiceConcurrentClient(prot, prot) {}
  MonitorReadServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::openstars::base::OpenBaseServiceConcurrentClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getCurrentStat(systemStat& _return);
  int32_t send_getCurrentStat();
  void recv_getCurrentStat(systemStat& _return, const int32_t seqid);
  void getStat(systemStat& _return, const int32_t seconds);
  int32_t send_getStat(const int32_t seconds);
  void recv_getStat(systemStat& _return, const int32_t seqid);
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}}} // namespace

#endif
