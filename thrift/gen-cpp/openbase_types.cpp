/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "openbase_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace openstars { namespace base {

int _kservice_statusValues[] = {
  service_status::DEAD,
  service_status::STARTING,
  service_status::ALIVE,
  service_status::STOPPING,
  service_status::STOPPED,
  service_status::WARNING
};
const char* _kservice_statusNames[] = {
  "DEAD",
  "STARTING",
  "ALIVE",
  "STOPPING",
  "STOPPED",
  "WARNING"
};
const std::map<int, const char*> _service_status_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kservice_statusValues, _kservice_statusNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const service_status::type& val) {
  std::map<int, const char*>::const_iterator it = _service_status_VALUES_TO_NAMES.find(val);
  if (it != _service_status_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const service_status::type& val) {
  std::map<int, const char*>::const_iterator it = _service_status_VALUES_TO_NAMES.find(val);
  if (it != _service_status_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

}} // namespace
