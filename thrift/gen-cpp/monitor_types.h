/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef monitor_TYPES_H
#define monitor_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "openbase_types.h"


namespace openstars { namespace base { namespace monitor {

typedef std::map<std::string, class diskStat>  diskStats;

typedef std::map<std::string, class networkStat>  networkStats;

class cpuStat;

class memoryStat;

class systemLoad;

class diskStat;

class networkStat;

class systemStat;

class InvalidOperation;

typedef struct _cpuStat__isset {
  _cpuStat__isset() : userCPU(false), kernelCPU(false), idleCPU(false), iowaitCPU(false), swapCPU(false), niceCPU(false), totalCPU(false) {}
  bool userCPU :1;
  bool kernelCPU :1;
  bool idleCPU :1;
  bool iowaitCPU :1;
  bool swapCPU :1;
  bool niceCPU :1;
  bool totalCPU :1;
} _cpuStat__isset;

class cpuStat : public virtual ::apache::thrift::TBase {
 public:

  cpuStat(const cpuStat&);
  cpuStat& operator=(const cpuStat&);
  cpuStat() : userCPU(0), kernelCPU(0), idleCPU(0), iowaitCPU(0), swapCPU(0), niceCPU(0), totalCPU(0) {
  }

  virtual ~cpuStat() throw();
  int32_t userCPU;
  int32_t kernelCPU;
  int32_t idleCPU;
  int32_t iowaitCPU;
  int32_t swapCPU;
  int32_t niceCPU;
  int32_t totalCPU;

  _cpuStat__isset __isset;

  void __set_userCPU(const int32_t val);

  void __set_kernelCPU(const int32_t val);

  void __set_idleCPU(const int32_t val);

  void __set_iowaitCPU(const int32_t val);

  void __set_swapCPU(const int32_t val);

  void __set_niceCPU(const int32_t val);

  void __set_totalCPU(const int32_t val);

  bool operator == (const cpuStat & rhs) const
  {
    if (!(userCPU == rhs.userCPU))
      return false;
    if (!(kernelCPU == rhs.kernelCPU))
      return false;
    if (!(idleCPU == rhs.idleCPU))
      return false;
    if (!(iowaitCPU == rhs.iowaitCPU))
      return false;
    if (!(swapCPU == rhs.swapCPU))
      return false;
    if (!(niceCPU == rhs.niceCPU))
      return false;
    if (!(totalCPU == rhs.totalCPU))
      return false;
    return true;
  }
  bool operator != (const cpuStat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const cpuStat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(cpuStat &a, cpuStat &b);

std::ostream& operator<<(std::ostream& out, const cpuStat& obj);

typedef struct _memoryStat__isset {
  _memoryStat__isset() : totalMem(false), freeMem(false), usedMem(false), cacheMem(false) {}
  bool totalMem :1;
  bool freeMem :1;
  bool usedMem :1;
  bool cacheMem :1;
} _memoryStat__isset;

class memoryStat : public virtual ::apache::thrift::TBase {
 public:

  memoryStat(const memoryStat&);
  memoryStat& operator=(const memoryStat&);
  memoryStat() : totalMem(0), freeMem(0), usedMem(0), cacheMem(0) {
  }

  virtual ~memoryStat() throw();
  int64_t totalMem;
  int64_t freeMem;
  int64_t usedMem;
  int64_t cacheMem;

  _memoryStat__isset __isset;

  void __set_totalMem(const int64_t val);

  void __set_freeMem(const int64_t val);

  void __set_usedMem(const int64_t val);

  void __set_cacheMem(const int64_t val);

  bool operator == (const memoryStat & rhs) const
  {
    if (!(totalMem == rhs.totalMem))
      return false;
    if (!(freeMem == rhs.freeMem))
      return false;
    if (!(usedMem == rhs.usedMem))
      return false;
    if (!(cacheMem == rhs.cacheMem))
      return false;
    return true;
  }
  bool operator != (const memoryStat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const memoryStat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(memoryStat &a, memoryStat &b);

std::ostream& operator<<(std::ostream& out, const memoryStat& obj);

typedef struct _systemLoad__isset {
  _systemLoad__isset() : load1m(false), load5m(false), load15m(false) {}
  bool load1m :1;
  bool load5m :1;
  bool load15m :1;
} _systemLoad__isset;

class systemLoad : public virtual ::apache::thrift::TBase {
 public:

  systemLoad(const systemLoad&);
  systemLoad& operator=(const systemLoad&);
  systemLoad() : load1m(0), load5m(0), load15m(0) {
  }

  virtual ~systemLoad() throw();
  double load1m;
  double load5m;
  double load15m;

  _systemLoad__isset __isset;

  void __set_load1m(const double val);

  void __set_load5m(const double val);

  void __set_load15m(const double val);

  bool operator == (const systemLoad & rhs) const
  {
    if (!(load1m == rhs.load1m))
      return false;
    if (!(load5m == rhs.load5m))
      return false;
    if (!(load15m == rhs.load15m))
      return false;
    return true;
  }
  bool operator != (const systemLoad &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const systemLoad & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(systemLoad &a, systemLoad &b);

std::ostream& operator<<(std::ostream& out, const systemLoad& obj);

typedef struct _diskStat__isset {
  _diskStat__isset() : readSpeed(false), writeSpeed(false) {}
  bool readSpeed :1;
  bool writeSpeed :1;
} _diskStat__isset;

class diskStat : public virtual ::apache::thrift::TBase {
 public:

  diskStat(const diskStat&);
  diskStat& operator=(const diskStat&);
  diskStat() : readSpeed(0), writeSpeed(0) {
  }

  virtual ~diskStat() throw();
  int64_t readSpeed;
  int64_t writeSpeed;

  _diskStat__isset __isset;

  void __set_readSpeed(const int64_t val);

  void __set_writeSpeed(const int64_t val);

  bool operator == (const diskStat & rhs) const
  {
    if (!(readSpeed == rhs.readSpeed))
      return false;
    if (!(writeSpeed == rhs.writeSpeed))
      return false;
    return true;
  }
  bool operator != (const diskStat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const diskStat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(diskStat &a, diskStat &b);

std::ostream& operator<<(std::ostream& out, const diskStat& obj);

typedef struct _networkStat__isset {
  _networkStat__isset() : readSpeed(false), writeSpeed(false) {}
  bool readSpeed :1;
  bool writeSpeed :1;
} _networkStat__isset;

class networkStat : public virtual ::apache::thrift::TBase {
 public:

  networkStat(const networkStat&);
  networkStat& operator=(const networkStat&);
  networkStat() : readSpeed(0), writeSpeed(0) {
  }

  virtual ~networkStat() throw();
  int64_t readSpeed;
  int64_t writeSpeed;

  _networkStat__isset __isset;

  void __set_readSpeed(const int64_t val);

  void __set_writeSpeed(const int64_t val);

  bool operator == (const networkStat & rhs) const
  {
    if (!(readSpeed == rhs.readSpeed))
      return false;
    if (!(writeSpeed == rhs.writeSpeed))
      return false;
    return true;
  }
  bool operator != (const networkStat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const networkStat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(networkStat &a, networkStat &b);

std::ostream& operator<<(std::ostream& out, const networkStat& obj);

typedef struct _systemStat__isset {
  _systemStat__isset() : cpu(false), memory(false), sysload(false), disks(false), networks(false), timestamp(false), seconds(false) {}
  bool cpu :1;
  bool memory :1;
  bool sysload :1;
  bool disks :1;
  bool networks :1;
  bool timestamp :1;
  bool seconds :1;
} _systemStat__isset;

class systemStat : public virtual ::apache::thrift::TBase {
 public:

  systemStat(const systemStat&);
  systemStat& operator=(const systemStat&);
  systemStat() : timestamp(0), seconds(0) {
  }

  virtual ~systemStat() throw();
  cpuStat cpu;
  memoryStat memory;
  systemLoad sysload;
  diskStats disks;
  networkStats networks;
  int64_t timestamp;
  int32_t seconds;

  _systemStat__isset __isset;

  void __set_cpu(const cpuStat& val);

  void __set_memory(const memoryStat& val);

  void __set_sysload(const systemLoad& val);

  void __set_disks(const diskStats& val);

  void __set_networks(const networkStats& val);

  void __set_timestamp(const int64_t val);

  void __set_seconds(const int32_t val);

  bool operator == (const systemStat & rhs) const
  {
    if (!(cpu == rhs.cpu))
      return false;
    if (!(memory == rhs.memory))
      return false;
    if (!(sysload == rhs.sysload))
      return false;
    if (!(disks == rhs.disks))
      return false;
    if (!(networks == rhs.networks))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(seconds == rhs.seconds))
      return false;
    return true;
  }
  bool operator != (const systemStat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const systemStat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(systemStat &a, systemStat &b);

std::ostream& operator<<(std::ostream& out, const systemStat& obj);

typedef struct _InvalidOperation__isset {
  _InvalidOperation__isset() : errorCode(false), why(false) {}
  bool errorCode :1;
  bool why :1;
} _InvalidOperation__isset;

class InvalidOperation : public ::apache::thrift::TException {
 public:

  InvalidOperation(const InvalidOperation&);
  InvalidOperation& operator=(const InvalidOperation&);
  InvalidOperation() : errorCode(0), why() {
  }

  virtual ~InvalidOperation() throw();
  int16_t errorCode;
  std::string why;

  _InvalidOperation__isset __isset;

  void __set_errorCode(const int16_t val);

  void __set_why(const std::string& val);

  bool operator == (const InvalidOperation & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(why == rhs.why))
      return false;
    return true;
  }
  bool operator != (const InvalidOperation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidOperation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(InvalidOperation &a, InvalidOperation &b);

std::ostream& operator<<(std::ostream& out, const InvalidOperation& obj);

}}} // namespace

#endif
